{"version":3,"sources":["components/Button.js","components/WhoIsGettingVaccinated.js","components/ScreeningQuestion.js","components/DoesNotQualify.js","components/Screening.js","components/InfoCollector.js","components/App.js","index.js"],"names":["Button","_ref","description","onClickAction","react_default","a","createElement","onClick","WhoIsGettingVaccinated","state","responseNumber","handleResponse","_this","setState","props","includeConsentProvider","includeDependants","showScreening","showInfoCollector","_this2","this","className","components_Button","Component","ScreeningQuestion","handleRadioChange","question","inputName","type","name","value","onChange","e","DoesNotQualify","consentProvider","dependantsExist","consenterIsRecievingVaccine","resetForm","Screening","firstName","lastName","qualifies","screeningQuestion1","screeningQuestion2","screeningQuestion3","screeningQuestion4","screeningQuestion5","screeningQuestion6","screeningQuestion7","screeningQuestions","concat","handleByPass","addNewVaccineRecipiant","handleChange","Object","defineProperty","target","id","stateName","stateValue","renderInstructions","renderScreeningQuestions","map","components_ScreeningQuestion","indexOf","key","action","htmlFor","components_DoesNotQualify","InfoCollector","consenterFirstName","consenterLastName","dateOfBirth","address","healthCard","telephoneNumber","relationToDependants","saveAddress","saveNumber","handleCheckBoxChange","handleAddDependant","storeReusableInfo","aVaccineRecipiantHasBeenCreated","addPatientDetails","defaultFirstName","defaultLastName","handleComplete","addressSaved","telephoneNumberSaved","phoneNuber","App","showWhoIsGettingVaccinatedOptions","showScreeningQuestions","questionNumber","vaccineReceipiantInfo","questionList","save","updateVaccineReceipiantInfo","push","patientRecord","filter","infoItem","console","log","components_WhoIsGettingVaccinated","moveToNextQuestion","components_Screening","components_InfoCollector","length","ReactDOM","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.ff6cffcc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\nconst Button = ({description, onClickAction}) => {\n    return (\n        <div>\n            <button onClick={onClickAction}>{description}</button>\n        </div>\n    );\n}\n\nexport default Button;","import React, { Component } from \"react\";\n\nimport Button from './Button';\n\n\nclass WhoIsGettingVaccinated extends Component {\n    state = { responseNumber: 0 }\n\n    \n    handleResponse = (responseNumber) => {\n        this.setState({\n            responseNumber\n        }, () => {\n            if (responseNumber === 1) {\n                this.props.includeConsentProvider();\n                this.props.includeDependants();\n                this.props.showScreening();\n            } else if (responseNumber === 2) {\n                this.props.includeDependants();\n                this.props.showInfoCollector();\n            } else {\n                this.props.includeConsentProvider();\n                this.props.showScreening();\n            }\n        });\n    }\n\n    \n    render() {\n        return (\n            < div className = \"whoIsGettingVaccinated\" >\n                <div className=\"question\">\n                    <h2>Who are you providing consent for today?</h2>\n                </div>\n                <div className=\"whoIsGettingVaccinated__answerOptions\">\n                    < Button \n                        description=\"Both myself, and my dependant(s)\"\n                        onClickAction={() => this.handleResponse(1)}\n                    / >\n                    < Button \n                        description=\"I am consenting on behalf of my dependant(s)\" \n                        onClickAction={() => this.handleResponse(2)}\n                    / >\n                    < Button\n                        description=\"I am consenting on my own behalf\" \n                        onClickAction={() => this.handleResponse(3)}\n                    / >\n                </div>                \n            </div>\n        );\n    }\n\n\n\n\n}\n\n\nexport default WhoIsGettingVaccinated;","import React, { Component } from \"react\";\n\n\nconst ScreeningQuestion = ({ handleRadioChange, question, inputName }) => {\n    return (\n        <div className=\"screeningQuestion\">\n            <div className=\"screeningQuestion__question\">\n                <p>{question}</p>\n            </div>\n            <div className=\"screeningQuestion__answerOptions\">\n                <input type=\"radio\" name={inputName} value=\"yes\" onChange={(e) => handleRadioChange(e)}/>\n                <input type=\"radio\" name={inputName} value=\"no\" onChange={(e) => handleRadioChange(e)}/>\n            </div>\n        </div>\n    );\n}\n\n\nexport default ScreeningQuestion;","import React, { Component } from \"react\";\n\nimport Button from './Button';\n\n\nconst DoesNotQualify = ({ consentProvider, dependantsExist, consenterIsRecievingVaccine, resetForm }) => {\n    if (!consentProvider && dependantsExist) {\n        return (\n            <div className=\"doesNotQualify\">\n                <div className=\"message\">\n                    <p>I'm sorry, you are not eligible to receive a flu shot at this time. Would you like to continue to provide concent for your dependants?</p>\n                </div>\n                < div className=\"doesNotQualify__options\" >\n                    <Button description=\"Yes\"/>\n                    <Button description=\"No\" onClickAction={resetForm}/>\n                </div>\n            </div>\n        )\n    }\n    if (consentProvider && dependantsExist) {\n        return (\n            <div className=\"doesNotQualify\">\n                <div className=\"message\">\n                    <p>I'm sorry, this individual is not eligible to receive a flu shot at this time. Would you like to continue to provide concent for another dependant?</p>\n                </div>\n                < div className=\"doesNotQualify__options\" >\n                    <Button description=\"Yes\"/>\n                    <Button description=\"No\" onClickAction={resetForm}/>\n                </div>\n            </div>\n        )\n    }\n    if (consenterIsRecievingVaccine && !dependantsExist) {\n        return (\n            <div className=\"doesNotQualify\">\n                <div className=\"message\">\n                    <p>I'm sorry, you are not eligible to receive a flu shot at this time.</p>\n                </div>\n                < div className=\"doesNotQualify__options\" >\n                    <Button description=\"OK\" onClickAction={resetForm}/>\n                </div>\n            </div>\n        )\n    }\n    \n    \n    \n}\n\nexport default DoesNotQualify;","import React, { Component } from \"react\";\n\nimport Button from './Button';\nimport ScreeningQuestion from './ScreeningQuestion';\nimport DoesNotQualify from './DoesNotQualify';\n\n\nclass Screening extends Component {\n    state = {\n        firstName: '',\n        lastName: '',\n        qualifies: true,\n        screeningQuestion1: '',\n        screeningQuestion2: '',\n        screeningQuestion3: '',\n        screeningQuestion4: '',\n        screeningQuestion5: '',\n        screeningQuestion6: '',\n        screeningQuestion7: ''\n    } \n\n    screeningQuestions = [\n        `Are ${this.props.consentProvider ? 'they' : 'you'} sick today (i.e., fever greater than 39.5°C, breathing problems, active infection)?`,\n        `Do ${this.props.consentProvider ? 'they' : 'you'} have an allergy to eggs or egg products?`,\n        `Do ${this.props.consentProvider ? 'they' : 'you'} have an allergy to any of the components of the flu vaccine (e.g., gentamicin, neomycin, kanamycin, thimerosal, formaldehyde)?`,\n        `Do ${this.props.consentProvider ? 'they' : 'you'} take a blood thinner or have a bleeding disorder?`,\n        `Have ${this.props.consentProvider ? 'they' : 'you'} had a serious reaction to influenza vaccine in the past?`,\n        `Do ${this.props.consentProvider ? 'they' : 'you'} have a new or changing condition affecting the brain or nervous system?`,\n        `Have ${this.props.consentProvider ? 'they' : 'you'} ever had Guillain-Barré syndrome?`\n    ]\n\n    handleByPass = () => {\n        if(this.state.firstName && this.state.lastName) {\n            this.props.addNewVaccineRecipiant(this.state.firstName, this.state.lastName);\n            this.props.showInfoCollector();\n        }    \n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.id]: e.target.value });\n    }\n\n    handleRadioChange = (e) => {\n        let stateName = e.target.name;\n        let stateValue = e.target.value;\n        this.setState({ [stateName]: stateValue }, () => {\n            if (stateValue === 'no') {\n                this.setState({ qualifies: false });\n            }\n            if (this.state.screeningQuestion1 === 'yes' && this.state.screeningQuestion2 === 'yes' && this.state.screeningQuestion3 === 'yes' && this.state.screeningQuestion4 === 'yes' && this.state.screeningQuestion5 === 'yes' && this.state.screeningQuestion6 === 'yes' && this.state.screeningQuestion7 === 'yes' && this.state.firstName && this.state.lastName) {\n                this.props.addNewVaccineRecipiant(this.state.firstName, this.state.lastName);\n                this.props.showInfoCollector();\n            }\n        });\n    }\n\n    renderInstructions = () => {\n        if (this.props.consenterIsRecievingVaccine && this.props.dependantsExist) {\n            return (\n                <h2>Starting with yourself, please provide the following information</h2>\n            );\n        } else if (this.props.consenterIsRecievingVaccine) {\n            return (\n                <h2>Please provide the following information</h2>\n            );\n        } else {\n            return (\n                <h2>Please provide the following information for the first person to be vaccinated.</h2>\n            );\n        }\n    }\n\n    renderScreeningQuestions = () => {\n        const renderedQuestions = this.screeningQuestions.map((question) => {\n            return (\n                <ScreeningQuestion\n                    question={question}\n                    inputName={`screeningQuestion${(this.screeningQuestions.indexOf(question)) + 1}`}\n                    handleRadioChange={this.handleRadioChange}\n                    key={this.screeningQuestions.indexOf(question)}\n                />\n            );\n        });\n        return renderedQuestions;\n    }\n\n\n    render() {\n        return(\n            <div className=\"screening\">\n                {this.state.qualifies ? (\n                <div className=\"screening__questionnaire\">\n                    <div className=\"screening__instructions\">\n                        {this.renderInstructions()}\n                    </div>\n                    <form action=\"\" className=\"screening__name\">\n                        < div className = \"screening__name--first\" >\n                            <label htmlFor=\"firstName\">First Name</label>\n                            <input type=\"text\" id=\"firstName\" onChange={this.handleChange} value={this.state.firstName} />\n                        </div>\n                        < div className = \"screening__name--last\" >\n                            <label htmlFor=\"lastName\">Last Name</label>\n                            <input type=\"text\" id=\"lastName\" onChange={this.handleChange} value={this.state.lastName}/>\n                        </div>\n                    </form>\n                    <form className=\"screening__questions\">\n                        <div className=\"screening__columnHeadings\">\n                            <h3>Questions</h3>\n                            <div className=\"screening__inputTitles\">\n                                <h3>Yes</h3>\n                                <h3>No</h3>\n                            </div>\n                        </div>\n                        {this.renderScreeningQuestions()}\n                    </form>\n                    <div className=\"screening__byPass\">\n                        <Button description={'No to all'} onClickAction={this.handleByPass} />\n                    </div>\n                </div>\n                ) : null}\n                {!this.state.qualifies ? (\n                    <DoesNotQualify \n                        consenterIsRecievingVaccine={this.props.consenterIsRecievingVaccine}\n                        dependantsExist={this.props.dependantsExist}\n                        consentProvider={this.props.consentProvider}\n                        resetForm={this.props.resetForm}\n                    />\n                ) : null}\n            </div>\n        )\n    }\n\n\n}\n\nexport default Screening;","import React, { Component } from \"react\";\n\nimport Button from './Button';\n\nclass InfoCollector extends Component {\n    state = {\n        consenterFirstName: '',\n        consenterLastName: '',\n        dateOfBirth: '',\n        address: '',\n        healthCard: '',\n        telephoneNumber: '',\n        relationToDependants: '',\n        saveAddress: false,\n        saveNumber: false\n    }\n    \n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    }\n\n    handleCheckBoxChange = (e) => {\n        // let save = this.state[e.target.id];\n        // let state = e.target.name;\n        // let value = this.state[e.target.name];\n        this.setState({\n            [e.target.id]: !this.state[e.target.id]\n        }\n        // , () => this.props.storeReusableInfo(save, state, value) //cool idea - needs work.\n        );\n    }\n\n    //think about a way to update saved value when its changed after the checkbox is clicked\n\n    handleAddDependant = () => {\n        if (this.state.saveAddress) {\n            this.props.storeReusableInfo(this.state.saveAddress, 'address', this.state.address);\n        }\n        if (this.state.saveNumber) {\n            this.props.storeReusableInfo(this.state.saveNumber, 'telephoneNumber', this.state.telephoneNumber);\n        }\n        if(this.props.aVaccineRecipiantHasBeenCreated){\n            this.props.addPatientDetails({\n                firstName: this.props.defaultFirstName,\n                lastName: this.props.defaultLastName,\n                healthCard: this.state.healthCard,\n                dateOfBirth: this.state.dateOfBirth,\n                address: this.state.address,\n                telephoneNumber: this.state.telephoneNumber\n            });\n        }\n        this.props.showScreening();\n    }\n\n    handleComplete = () => {\n        this.props.addPatientDetails({\n            firstName: this.props.defaultFirstName,\n            lastName: this.props.defaultLastName,\n            healthCard: this.state.healthCard,\n            dateOfBirth: this.state.dateOfBirth,\n            address: this.state.address,\n            telephoneNumber: this.state.telephoneNumber\n        });\n    }\n    \n    \n    \n    render() {\n        return (\n            <div className=\"infoCollector\">\n                <form className=\"infoCollector__form\">\n                    <div className=\"infoCollector__names\">\n                        < div className = \"screening__name--first\" >\n                            <label htmlFor=\"consenterFirstName\">First Name</label>\n                            <input type=\"text\" id=\"consenterFirstName\" onChange={this.handleChange} value={this.state.consenterFirstName ? this.state.consenterFirstName :  this.props.defaultFirstName} />\n                        </div>\n                        < div className = \"screening__name--last\" >\n                            <label htmlFor=\"consenterastName\">Last Name</label>\n                            <input type=\"text\" id=\"lastName\" onChange={this.handleChange} value={this.state.consenterLastName ? this.state.consenterLastName :  this.props.defaultLastName}/>\n                        </div>\n                    </div>\n                    <div className=\"infoCollector__reusableInfo\">\n                        {!this.props.addressSaved ? \n                            <div className=\"infoCollector__infoItem\">\n                                <label htmlFor=\"address\">Address</label>\n                                <input type=\"text\" id=\"address\" onChange={this.handleChange} value={this.state.address}/>\n                                {this.props.dependantsExist ? \n                                <label htmlFor=\"saveAddress\">Use this address for dependant(s)?</label>\n                                : null}\n                                {this.props.dependantsExist ? \n                                <input type=\"checkbox\" id=\"saveAddress\" name=\"address\" onClick={this.handleCheckBoxChange}/>\n                                : null}\n                            </div>\n                        : null}\n                        {!this.props.telephoneNumberSaved ?\n                            <div className=\"infoCollector__infoItem\">\n                                <label htmlFor=\"telephoneNumber\">Phone Number</label>\n                                <input type=\"text\" id=\"telephoneNumber\" onChange={this.handleChange} value={this.state.phoneNuber}/>\n                                {this.props.dependantsExist ? \n                                <label htmlFor=\"saveNumber\">Use this number for dependant(s)?</label>\n                                : null}\n                                {this.props.dependantsExist ? \n                                <input type=\"checkbox\" id=\"saveNumber\" name=\"telephoneNumber\" onClick={this.handleCheckBoxChange}/>\n                                : null}\n                            </div>\n                        : null}\n                    </div>\n                    {(!this.props.consenterIsRecievingVaccine && !this.props.aVaccineRecipiantHasBeenCreated) ? null :\n                    <div className=\"infoCollector__patientInfo\">\n                        <div className=\"infoItem\">\n                            <label htmlFor=\"dateOfBirth\">Date Of Birth</label>\n                            <input type=\"text\" id=\"dateOfBirth\" onChange={this.handleChange} value={this.state.dateOfBirth}/>\n                        </div>\n                        <div className=\"infoItem\">\n                            <label htmlFor=\"healthCard\">Health Card</label>\n                            <input type=\"text\" id=\"healthCard\" onChange={this.handleChange} value={this.state.healthCard}/>\n                        </div>\n                    </div>\n                    }\n                </form>\n                {this.props.dependantsExist ? \n                <Button \n                    description=\"Add a dependant\"\n                    onClickAction={this.handleAddDependant}\n                /> : null}\n                <Button description=\"Complete\" onClickAction={this.handleComplete}/>\n            </div>\n        );\n    }\n    \n} \n\nexport default InfoCollector;","import './styles/App.css';\nimport React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport Button from './Button';\nimport WhoIsGettingVaccinated from './WhoIsGettingVaccinated';\nimport Screening from './Screening';\nimport InfoCollector from './InfoCollector';\n\n\n\n\nclass App extends Component {\n    state = {\n        showWhoIsGettingVaccinatedOptions: true,\n        showScreeningQuestions: false,\n        showInfoCollector: false,\n        questionNumber: 0,\n        consentProvider: null,\n        consenterIsRecievingVaccine: false,\n        dependantsExist: false,\n        vaccineReceipiantInfo: [],\n        addressSaved: '',\n        telephoneNumberSaved: ''\n    }\n\n    questionList = ['Who are you providing consent for today?', 'Question2'];\n\n    includeConsentProvider = () => {\n        this.setState({\n            consenterIsRecievingVaccine: true\n        });\n    }\n\n    includeDependants = () => {\n        this.setState({\n            dependantsExist: true\n        });\n    }\n\n    storeReusableInfo = (save, state, value) => {\n        if (save) {\n            this.setState({ [`${state}Saved`]: value });\n        } else {\n            this.setState({ [`${state}Saved`]: '' });\n        }\n    }\n    \n\n    addNewVaccineRecipiant = (firstName, lastName) => {\n        const updateVaccineReceipiantInfo = this.state.vaccineReceipiantInfo;\n        updateVaccineReceipiantInfo.push({ firstName, lastName });\n        this.setState({ vaccineReceipiantInfo: updateVaccineReceipiantInfo });\n    }\n\n    addPatientDetails = ({ firstName, lastName, healthCard, dateOfBirth, address, telephoneNumber }) => {\n        if (telephoneNumber === '') {\n            telephoneNumber = this.state.telephoneNumberSaved;\n        }\n        if (address === '') {\n            address = this.state.telephoneNumberSaved;\n        }\n        const updatedVaccineReceipiantInfo = this.state.vaccineReceipiantInfo;\n        // console.log(firstName, lastName, healthCard, dateOfBirth, address, telephoneNumber);\n        const patientRecord = updatedVaccineReceipiantInfo.filter(infoItem => {\n            return infoItem.firstName === firstName && infoItem.lastName === lastName;\n        });\n        patientRecord[0].healthCard = healthCard;\n        patientRecord[0].dateOfBirth = dateOfBirth;\n        patientRecord[0].address = address;\n        patientRecord[0].telephoneNumber = telephoneNumber;\n        console.log(this.state.vaccineReceipiantInfo);\n    }\n\n\n    showScreening = () => {\n        this.setState({\n            showWhoIsGettingVaccinatedOptions: false,\n            showInfoCollector: false,\n            showScreeningQuestions: true\n        });\n    } \n\n    showInfoCollector = () => {\n        this.setState({\n            showWhoIsGettingVaccinatedOptions: false,\n            showInfoCollector: true,\n            showScreeningQuestions: false\n        });\n    } \n\n    resetForm = () => {\n        this.setState({\n            showWhoIsGettingVaccinatedOptions: true,\n            showScreeningQuestions: false,\n            questionNumber: 0,\n            consentProvider: null,\n            consenterIsRecievingVaccine: false,\n            dependantsExist: false,\n            vaccineReceipiantInfo: []\n        });\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"app\">\n                <div className=\"AnswerContainer\">\n                    {this.state.showWhoIsGettingVaccinatedOptions ? \n                    < WhoIsGettingVaccinated \n                        includeConsentProvider={this.includeConsentProvider}\n                        includeDependants={this.includeDependants}\n                        consenterIsRecievingVaccine={this.state.consenterIsRecievingVaccine}\n                        moveToNextQuestion={this.moveToNextQuestion}\n                        showScreening={this.showScreening}\n                        showInfoCollector={this.showInfoCollector}\n                    / > : null}\n                    {this.state.showScreeningQuestions ? \n                    <Screening\n                        moveToNextQuestion={this.moveToNextQuestion}\n                        consentProvider={this.state.consentProvider}\n                        consenterIsRecievingVaccine={this.state.consenterIsRecievingVaccine}\n                        dependantsExist={this.state.dependantsExist}\n                        addNewVaccineRecipiant={this.addNewVaccineRecipiant}\n                        resetForm={this.resetForm}\n                        showInfoCollector={this.showInfoCollector}\n                    / > : null}\n                    {this.state.showInfoCollector ? \n                    <InfoCollector\n                        consenterIsRecievingVaccine={this.state.consenterIsRecievingVaccine}\n                        defaultFirstName={this.state.vaccineReceipiantInfo[0] ? this.state.vaccineReceipiantInfo[(this.state.vaccineReceipiantInfo.length - 1)].firstName : null}\n                        defaultLastName={this.state.vaccineReceipiantInfo[0] ? this.state.vaccineReceipiantInfo[(this.state.vaccineReceipiantInfo.length - 1)].lastName : null}\n                        storeReusableInfo={this.storeReusableInfo}\n                        telephoneNumberSaved={this.state.telephoneNumberSaved}\n                        addressSaved={this.state.addressSaved}\n                        dependantsExist={this.state.dependantsExist}\n                        aVaccineRecipiantHasBeenCreated={this.state.vaccineReceipiantInfo[0]}\n                        addPatientDetails={this.addPatientDetails}\n                        showScreening={this.showScreening}\n                    / > : null}\n                </div>\n            </div>\n        );\n    } \n}\n\n//display the first question asking if the person filling out the form is getting the flu shot or if they are filling out the form for a dependant\n\n//if they are filling it out for a dependant ask if for the total number of dependants\n//if the number of dependants is greater than 1 ask for a list of first/last names\n\n//provide list of screening questions\n\n//if only 1 dependant or just recipiant list questions with checkboxes\n//if recipiant answers 'no' to any alert 'I am sorry but you do not qualify to recieve a flu shot at this time. Please consult your physition for more information'\n\n//if multiple dependants provide scenarios with dependant names listed below and ask to select any that the statements apply to.\n// if recipeian selects any dependant for any statement alert '____ dependant can not proceed ... \n//if there are dependants who can continue, give the option to do so.\n\n//if they are filling it out for themselves provide:\n    //first name, last name, address, dob (calculate age based on dob), healthcard #, tel #\n\n\n//if they are filling it out for multiples provide a list of forms with the names pre populated at the top provide a checkbox for all address' are the same\n//if yes - first question should be for address\n//if no - each form will contain an address field\n\n\nexport default App;","import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}